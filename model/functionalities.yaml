# NOTE: some requirements that would necessarily be present in

# Provides the car with its current location. Can also provide those data to the
# client when it is riding the car.
location_service_car:
  outputs:
  - name: location data
    cardinality: multiple # This means that this output can be sent to more
                          # than one receiver. By default, unless specified
                          # otherwise, the cardinality is "single"
    requirements: # input/output-level requirements
    - network:         # the data generated from this output can be handled only
        type: private  # over a trusted network
        owner: Company

# A service calculating the recommended route for a client, based on its
# location and information about client-car matching.
route_calculation_client:
  inputs:               # if connected to the location service above, this implies
  - name: location data # that this component can operate only over a trusted network
  - name: matching data
  outputs:           # if connected to the route display below, this implies that
  - name: client route data # this output must be sent at least every 100 ms

# Provides the location data to the client when it is in an autonomous mode.
location_service_client:
  outputs:
  - name: location data
    cardinality: multiple

# Displays the route data on the client's smartphone
route_display:
  inputs:
  - name: client route data
    requirements: # input/output-level requirements
    - max_latency: 100 ms # the data on the input should not have been generated
      probability: 0.99   # more than 100 ms ago
    - max_refresh: 100 ms # new input is required every 100 ms
      probability: 0.99

# Environment sensory data processing. Aggregates and processes data coming from
# smart city sensors in the local neighborhood. Can run on either an edge server
# or a smart car, however requires the underlying hardware to be able to execute
# a certain number of MADOPS per sensor.
environment_sdp:
  inputs:
  - name: sensory data
    cardinality: multiple
  outputs:
  - name: global sensory data
  requirements: # Functionality-level requirements
  # Number of multiply-add operations per second required to run this function
   - MADOPS: 100000 * inputs.external_sensor.count # Dependent on the number
                                                   # of connected sensors

# A service calculating the route of a car, based on its location, the data
# from city sensors, and information about client-car matching.
route_calculation_car:
  inputs:
  - name: car location data
  - name: global sensory data
  - name: matching data
  outputs:
  - name: car route data
    cardinality: 2

# Personal sensory data processing. This functionality aggregates and processes
# all the data coming from the sensors installed in the car. The results arw
# then supplied to the steering function to be used in decision-making.
personal_sdp:
  outputs:
  - name: local sensory data

# The core functionality of the smart car - steering the car based on all the
# sensory data available.
steering:
  inputs:
  - name: car location data
    requirements:
    - max_latency: 0 # means that this input must come from the same component
  - name: local sensory data
    requirements:
    - max_latency: 0 # means that this input must come from the same component
  - name: route
    requirements:
    - max_refresh: 1000 # This input does not have to be provided immediately
                        # since it is not safety-critical

# Direct client-car communication.
direct_communication:
  inputs:
  - name: direct comms
  outputs:
  - name: direct comms

# Client-car communication that happens through a service running in cloud.
cloud_communication:
  inputs:
  - name: mediator comms
  outputs:
  - name: cloud comms

# Service that can facilitate client-car communication when there is no direct
# connection between them.
mediation_service:
  inputs:
  - name: cloud comms
    cardinality: multiple
  - name: matching data
    cardinality: multiple
  outputs:
  - name: mediator comms

# The differences between the data provided by different kinds of sensors are
# not essential in this model, thus there is only one functionality standing
# for them
sensor_service:
  outputs:
  - name: sensory data
    requirements:        # This requirement does not put any restrictions on
      - max_refresh: 100 # deployment rather, it guarantees some properties of
                         # this software to other components.

# Matching clients to cars based on the information about their routes
matching_service:
  inputs:
    - name: client route data
      cardinality: multiple
    - name: car route data
      cardinality: multiple
  outputs:
    - name: matching data